// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// emHaplotyping
List emHaplotyping(NumericMatrix genoMat, NumericMatrix possibleHaps, int32_t max_iter, double tol);
RcppExport SEXP _bios666r_emHaplotyping(SEXP genoMatSEXP, SEXP possibleHapsSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type genoMat(genoMatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type possibleHaps(possibleHapsSEXP);
    Rcpp::traits::input_parameter< int32_t >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(emHaplotyping(genoMat, possibleHaps, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bios666r_emHaplotyping", (DL_FUNC) &_bios666r_emHaplotyping, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_bios666r(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
